* Interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)   ;; hide the startup message
(setq-default fill-column 80)
(setq linum-format "%4d \u2502 ")  ;; format line number spacing

(load-theme 'material t)           ;; load material theme
;;(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)

(global-set-key (kbd "C-c o") 'occur)
(global-linum-mode t)              ;; enable line numbers globally

;; Allow hash to be entered  
(global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))

;; default value for all buffers
(setq-default tab-width 2)

#+END_SRC

* Themes
#+BEGIN_SRC emacs-lisp
(use-package color-theme-modern
 :ensure t)

(use-package material-theme 
 :ensure t
 :config (load-theme 'material t))

#+END_SRC

#+RESULTS:
: t

* Easily adjust the font size in all Emacs frames
  Hold C-M and prese either - or = to decrease or increase
#+BEGIN_SRC emacs-lisp
(use-package default-text-scale
  :ensure t)
#+END_SRC

* Evil mode
#+BEGIN_SRC emacs-lisp
(use-package evil
 :ensure t
 :config
 (evil-mode 1)

 (use-package evil-leader
  :ensure t
  :config
  (global-evil-leader-mode))

 (use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode)))
#+END_SRC

* which key
Brings up some help
#+BEGIN_SRC emacs-lisp
(use-package which-key
	:ensure t
	:config
	(which-key-mode))
#+END_SRC

* PDF tools
#+BEGIN_SRC emacs-lisp
(add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
(use-package pdf-tools
 :pin manual ;; manually update
 :config
 ;; initialise
 (pdf-tools-install)
 ;; open pdfs scaled to fit page
 ;;(setq-default pdf-view-display-size 'fit-page)
 ;; more fine-grained zooming
 (setq pdf-view-resize-factor 1.1)
 ;; automatically annotate highlights
 (setq pdf-annot-activate-created-annotations t)
 ;; use normal isearch
 (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
#+END_SRC

#+RESULTS:
: t

* Org-mode stuff
Org bullets makes things look pretty
[[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][Orgmode for GTD]]

#+BEGIN_SRC emacs-lisp

;; hide reg exp characters in the prose
(setq org-hide-emphasis-markers t)

(setf (nth 4 org-emphasis-regexp-components) 10)
(load-library "org")

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (add-hook 'org-mode-hook 'visual-line-mode)

(setenv "BROWSER" "google-chrome")
(setq org-file-apps
 (append '(
           ("\\.pdf\\'" . "evince %s")
           ("\\.x?html?\\'" . "/usr/bin/google-chrome %s")
          ) org-file-apps ))

;; Orgmode for GTD          

(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-refile-use-outline-path 'file)

(setq org-agenda-files '("~/sf_box/gtd/inbox.org"
                         "~/sf_box/gtd/gtd.org"
                         "~/sf_box/gtd/tickler.org"))

(setq org-capture-templates '(("t" "Todo [inbox]" entry
                               (file+headline "~/sf_box/gtd/inbox.org" "Tasks")
                               "* TODO %i%?")
                              ("T" "Tickler" entry
                               (file+headline "~/sf_box/gtd/tickler.org" "Tickler")
                               "* %i%? \n %U")))
          
(setq org-refile-targets '(("~/sf_box/gtd/gtd.org" :maxlevel . 3)
                           ("~/sf_box/gtd/someday.org" :level . 1)
                           ("~/sf_box/gtd/tickler.org" :maxlevel . 2)))
                           
(setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

(setq org-agenda-custom-commands 
      '(("o" "At the office" tags-todo "@office"
         ((org-agenda-overriding-header "Office")
          (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))))

(defun my-org-agenda-skip-all-siblings-but-first ()
  "Skip all but the first non-done entry."
  (let (should-skip-entry)
    (unless (org-current-is-todo)
      (setq should-skip-entry t))
    (save-excursion
      (while (and (not should-skip-entry) (org-goto-sibling t))
        (when (org-current-is-todo)
          (setq should-skip-entry t))))
    (when should-skip-entry
      (or (outline-next-heading)
          (goto-char (point-max))))))
		  
(defun org-current-is-todo ()
  (string= "TODO" (org-get-todo-state)))

#+END_SRC

#+RESULTS:
: org-current-is-todo

* Org noter and pdftools
#+BEGIN_SRC emacs-lisp
(use-package org-pdftools
  :config (setq org-pdftools-root-dir "/home/sg211443/Documents/pdfs"
                org-pdftools-search-string-separator "??")
  (with-eval-after-load 'org
    (org-link-set-parameters "pdftools"
                             :follow #'org-pdftools-open
                             :complete #'org-pdftools-complete-link
                             :store #'org-pdftools-store-link
                             :export #'org-pdftools-export)
    (add-hook 'org-store-link-functions 'org-pdftools-store-link)))

#+END_SRC

#+RESULTS:
: t

* Babel load languages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
  'org-babel-load-languages
  '((lisp . t)
    (python . t)))
#+END_SRC

#+RESULTS:

* Superior Lisp Interaction Mode for Emacs
  #+BEGIN_SRC emacs-lisp
  (use-package slime
  :ensure t
  :defer t
  :init
  (setq inferior-lisp-program "sbcl")
  :config
  (use-package slime-company
    :ensure t)
    (add-hook 'slime-mode-hook
            (lambda ()
              (load (expand-file-name "~/quicklisp/slime-helper.el"))
              (add-to-list 'slime-contribs 'slime-fancy)
              (add-to-list 'slime-contribs 'inferior-slime))))

  #+END_SRC

* Clang-format
#+BEGIN_SRC emacs-lisp
  (require 'clang-format)
  (global-set-key (kbd "C-c i") 'clang-format-region)
  (global-set-key (kbd "C-c u") 'clang-format-buffer)
#+END_SRC

* Git wrapper
Advanced in emacs git menu - [[https://github.com/magit/magit][magit]]
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+END_SRC
* Python - elpy
Use [[https://realpython.com/emacs-the-best-python-editor/][RealPython]] to set most of the following configuration
Use [[https://medium.com/analytics-vidhya/managing-a-python-development-environment-in-emacs-43897fd48c6a][Modern]] to set elpy with flycheck, black etc.

elpy-doc C-c C-d: Shows the documentation of the function/class under cursor in
a new window.

elpy-goto-definition M-: Go to the definition of the function/class under
cursor. This helps me see how it’s implemented, even if it’s in a 3rd party
package.

elpy-nav-indent-shift-(left/right) M-(left/right) Shifts a selected block either
right or left 1 level. This is great for moving blocks of code in/out of if
statements or loops.

elpy-nav-(forward/backward)-block C-M-(n/p) Navigate between blocks of
code. This is helpful for moving between blocks/functions/classes.

elpy-nav-move-line-or-region-(up/down) M-(up/down) Move an entire block of code
up/down. This is helpful for moving code around.

More about straight.el on [[https://github.com/raxod502/straight.el#getting-started][GitHub]]

black helps me format code and is auto-enabled on save.

#+BEGIN_SRC emacs-lisp

; Show python-documentation as info-pages via C-h S
(add-to-list 'load-path "~/.emacs.d/libs/pydoc-info")
(require 'pydoc-info)
(info-lookup-add-help
   :mode 'python-mode
   :parse-rule 'pydoc-info-python-symbol-at-point
   :doc-spec
   '(("(python)Index" pydoc-info-lookup-transform-entry)
     ("(TARGETNAME)Index" pydoc-info-lookup-transform-entry)))

(setq py-python-command "python3")

(add-hook 'python-mode-hook
  (lambda () (setq python-indent-offset 4)))

;(setq python-shell-interpreter "jupyter"
(setq python-shell-interpreter "ipython3"
      python-shell-interpreter-args "console --simple-prompt"
      python-shell-prompt-detect-failure-warning nil)

(use-package better-defaults
  :ensure t)

(use-package flycheck
  :ensure t
  :defer 3
  :config (global-flycheck-mode 1))
  
(use-package elpy
    :straight t 
    :bind
    (:map elpy-mode-map
          ("C-M-n" . elpy-nav-forward-block)
          ("C-M-p" . elpy-nav-backward-block))
    :hook ((elpy-mode . flycheck-mode))
    :init
    (elpy-enable)
    :config
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)))

    (use-package buftra
    :straight (:host github :repo "humitos/buftra.el"))

(add-to-list 'python-shell-completion-native-disabled-interpreters
      "jupyter")

(use-package py-pyment
    :straight (:host github :repo "humitos/py-cmd-buffer.el")
    :config
    (setq py-pyment-options '("--output=numpydoc")))
    
(use-package blacken
    :straight t
    :hook (python-mode . blacken-mode)
    :config
    (setq blacken-line-length '88))

(use-package ein
  :ensure t
  :commands (ein:notebooklist-open))
#+END_SRC

#+RESULTS:
